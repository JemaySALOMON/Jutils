#!/bin/bash
# ============================================================
# R_CMD_tools - Build, Check, and Install R packages with flags
# Author : Jemay SALOMON
# Date   : 2025-10-22
# Version: 0.1.0
# ============================================================

# ------------------------------------------------------------
# Internal core function
# ------------------------------------------------------------
_run_build_and_check() {
  set -e

  local PKG_PATH="$1"; shift
  local MODE="$1"; shift
  local CHECK_ARGS=()
  local BUILD_ARGS=()
  local ORIG_DIR=$(pwd)

  # Parse optional arguments
  while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
      --args)
        shift; CHECK_ARGS=($1); shift ;;
      --build_args)
        shift; BUILD_ARGS=($1); shift ;;
      *)
        echo "‚ö†Ô∏è  Warning: unknown argument $1 ignored"; shift ;;
    esac
  done

  # Verify package path
  if [ ! -f "$PKG_PATH/DESCRIPTION" ]; then
    echo "‚ùå Error: DESCRIPTION file not found in '$PKG_PATH'"
    eval "$OLD_OPTIONS"
    return 1
  fi

  local PKG_NAME=$(basename "$PKG_PATH")
  local PKG_VER=$(grep -m1 '^Version:' "$PKG_PATH/DESCRIPTION" | awk '{print $2}')
  local PKG_TAR="${PKG_NAME}_${PKG_VER}.tar.gz"

  mkdir -p "$PKG_PATH/bld"
  local TMP_PATH="$PKG_PATH/bld"

  echo "üì¶ Package: $PKG_NAME"
  echo "üìÅ Path   : $PKG_PATH"
  echo "--------------------------------------------"

  # Clean old builds
  echo "üßπ Cleaning old builds..."
  find /tmp -maxdepth 1 -type f -name "${PKG_NAME}_*.tar.gz" -delete || true
  find "$PKG_PATH" -maxdepth 1 -type d -name "${PKG_NAME}.Rcheck" -exec rm -rf {} +

  # Build
  echo "üèóÔ∏è  Building the package..."
  cd "$TMP_PATH"
  if [ ${#BUILD_ARGS[@]} -eq 0 ]; then
    R CMD build "$PKG_PATH"
  else
    R CMD build "$PKG_PATH" "${BUILD_ARGS[@]}"
  fi

  # Check
  echo "üîç Checking the package..."
  set +e
  if [ ${#CHECK_ARGS[@]} -eq 0 ]; then
    R CMD check "$PKG_TAR"
  else
    R CMD check "$PKG_TAR" "${CHECK_ARGS[@]}"
  fi
  local CHECK_STATUS=$?
  set -e

  # Handle check/install results
  if [ "$MODE" = "check" ]; then
    if [ $CHECK_STATUS -ne 0 ]; then
      echo "‚ö†Ô∏è  Package check encountered errors."
    else
      echo "‚úÖ Check passed successfully!"
    fi
  elif [ "$MODE" = "install" ]; then
    if [ $CHECK_STATUS -ne 0 ]; then
      echo "‚ö†Ô∏è  Check encountered errors. Installing package anyway..."
    else
      echo "‚úÖ Check passed successfully. Installing package..."
    fi
    R CMD INSTALL "$PKG_TAR"
    echo "‚úÖ Installation completed."
  fi

  # Clean up build artifacts
  rm -rf "$TMP_PATH" || true
  cd "$ORIG_DIR"

  echo "--------------------------------------------"
  echo "‚ú® All done! Package built, checked${MODE:+, $MODE} and cleaned."
}

# ------------------------------------------------------------
# Public functions
# ------------------------------------------------------------
R_CMD_check() {
  (
  if [ -z "$1" ]; then
    echo "‚ùå Usage: R_CMD_check /path/to/pkg [--args \"flags\"] [--build_args \"flags\"]"
    return 1
  fi
  _run_build_and_check "$(realpath "$1")" "check" "${@:2}"
  )
}

R_CMD_install() {
  (
  if [ -z "$1" ]; then
    echo "‚ùå Usage: R_CMD_install /path/to/pkg [--args \"flags\"] [--build_args \"flags\"]"
    return 1
  fi
  _run_build_and_check "$(realpath "$1")" "install" "${@:2}"
  )
}

# ------------------------------------------------------------
# Export functions if sourced
# ------------------------------------------------------------
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
  export -f R_CMD_check
  export -f R_CMD_install
fi

# ------------------------------------------------------------
# CLI entry point if executed directly
# ------------------------------------------------------------
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  CMD="$1"; shift || true
  case $CMD in
    check)   R_CMD_check "$@" ;;
    install) R_CMD_install "$@" ;;
    *)
      echo "Usage:"
      echo "  R_CMD_tools check /path/to/pkg [--args \"flags\"] [--build_args \"flags\"]"
      echo "  R_CMD_tools install /path/to/pkg [--args \"flags\"] [--build_args \"flags\"]"
      ;;
  esac
fi
